import tensorflow as tf
from tensorflow_addons.utils.types import FloatTensorLike
import numpy as np
from tensorflow.python.keras import backend
from tensorflow.python.platform import tf_logging as logging
from tensorflow.keras.callbacks import Callback


# "Ultimate Adam" is an algorithm that attempts to combine many modern techniques into one clean optimizer for Tensorflow

# It is recommended to use the ReduceLROnPlatuea Callback with UA, as opposed to reducing LR on a fixed schedule of steps.

# UA automatically incorporates weight decay and provides the user an option to decouple wd ('weight_decay_reduce') that determines 
# whether or not weight decay is reduced along with LR.

# Instead of warmup/Radam, we also incorporate a novel methodology of smoothly transitioning SGD into Adam, 
# to solve the issue of variance in adaptive learn rates in the beginning stages of optimization leading to 
# a suboptimal optimization trajectory.
# the first step is 100% SGD and then the SGD component is reduced by 'alpha' percentage each step after.
# Some experiments have shown Adam to converge to a better final global minima than SGD 
# in cases where the early stage variance is dealt with.

# UA also incorporates the ability to turn on "belief", 
# a technique used to taker bigger steps when the gradient is closer to our estimation.


class UltimateAdam(tf.keras.optimizers.Optimizer):

    def __init__(
            self,
            learning_rate: FloatTensorLike = 0.001,
            weight_decay: FloatTensorLike = 0.00001,
            sgd_to_adam_factor: FloatTensorLike = 0.9,
            beta_1: FloatTensorLike = 0.9,
            beta_2: FloatTensorLike = 0.999,
            epsilon: FloatTensorLike = 1e-14,
            use_belief=False,
            weight_decay_reduce=False,
            name: str = "UltimateAdam",
            **kwargs,
    ):

        super().__init__(name, **kwargs)
        self._init_lr = learning_rate
        self._set_hyper("learning_rate", learning_rate)
        self._set_hyper("weight_decay", weight_decay)
        self._set_hyper("beta_1", beta_1)
        self._set_hyper("beta_2", beta_2)
        self.epsilon = epsilon or tf.keras.backend.epsilon()
        self._sgd_to_adam_factor = sgd_to_adam_factor
        self._use_belief = use_belief
        self._weight_decay_reduce = weight_decay_reduce
        self._has_weight_decay = weight_decay != 0.0

    def _create_slots(self, var_list):
        for var in var_list:
            self.add_slot(var, "m")
        for var in var_list:
            self.add_slot(var, "v")

    def set_weights(self, weights):
        params = self.weights
        num_vars = int((len(params) - 1) / 2)
        if len(weights) == 3 * num_vars + 1:
            weights = weights[: len(params)]
        super().set_weights(weights)

    def _resource_apply_dense(self, grad, var):
        var_dtype = var.dtype.base_dtype
        lr = self._get_hyper("learning_rate", var_dtype)
        wd = self._get_hyper("weight_decay", var_dtype)
        m = self.get_slot(var, "m")
        v = self.get_slot(var, "v")
        beta_1_t = self._get_hyper("beta_1", var_dtype)
        beta_2_t = self._get_hyper("beta_2", var_dtype)
        epsilon_t = tf.convert_to_tensor(self.epsilon, var_dtype)
        local_step = tf.cast(self.iterations + 1, var_dtype)
        beta_1_power = tf.pow(beta_1_t, local_step)
        beta_2_power = tf.pow(beta_2_t, local_step)

        m_t = m.assign(
            beta_1_t * m + (1.0 - beta_1_t) * grad, use_locking=self._use_locking
        )
        m_corr_t = m_t / (1.0 - beta_1_power)

        if self._use_belief:
            v_t = v.assign(
                beta_2_t * v + (1.0 - beta_2_t) * tf.math.square(grad - m_t) + epsilon_t,
                use_locking=self._use_locking,
            )
        else:
            v_t = v.assign(
                beta_2_t * v + (1.0 - beta_2_t) * tf.math.square(grad) + epsilon_t,
                use_locking=self._use_locking,
            )
        v_corr_t = tf.sqrt(v_t / (1.0 - beta_2_power))

        sgd_ratio = tf.math.pow(self._sgd_to_adam_factor, tf.cast(self.iterations, tf.float32))

        # calculate step
        # sgd step = m_corr_t
        momemtum_component = m_corr_t * sgd_ratio

        # adam step = m_corr_t / (v_corr_t + epsilon_t)
        adaptive_component = (m_corr_t / (tf.math.sqrt(v_corr_t) + epsilon_t)) * (1 - sgd_ratio)

        if self._weight_decay_reduce:

            # combine into final step
            step = (momemtum_component + adaptive_component) * lr

            # modify step by weight decay
            if self._has_weight_decay:
                step += wd * (1 / self._init_lr) * lr * var

            var_update = var.assign_sub(step, use_locking=self._use_locking)
        else:

            # combine into final step
            step = momemtum_component + adaptive_component

            # modify step by weight decay
            if self._has_weight_decay:
                step += wd * var

            var_update = var.assign_sub(step * lr, use_locking=self._use_locking)

        updates = [var_update, m_t, v_t]
        return tf.group(*updates)

