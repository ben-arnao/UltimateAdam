import numpy as np


# "Ultimate Adam" is an algorithm that attempts to combine many modern techniques into one clean optimizer

# UA automatically incorporates weight decay and reduce LR on plateau. Weight decay is reduced
# along with LR by the same proportion, such that the user only needs to find the best LR/weight decay ratio.

# instead of warmup/Radam, we also incorporate a novel methodology of smoothly transitioning
# SGD into Adam, to solve the issue of variance in adaptive learn rates in the beginning stages of optimization
# leading to a suboptimal optimization trajectory.
# the first step is 100% SGD and then the SGD component is reduced by 'alpha' percentage each step after

# UA also incorporates the ability to turn on "belief", 
# a technique used to taker bigger steps when the gradient is closer to our estimation. 
# The belief paper recommends a smaller epsilon.
# belief is turned on by default, and the eps is smaller by default as well
import tensorflow as tf
from tensorflow_addons.utils.types import FloatTensorLike
import numpy as np
from tensorflow.python.keras import backend
from tensorflow.python.platform import tf_logging as logging
from tensorflow.keras.callbacks import Callback


class ReduceLROnPlateau(Callback):

    def __init__(self,
                 monitor='val_loss',
                 factor=0.1,
                 patience=10,
                 verbose=0,
                 mode='auto',
                 min_delta=1e-4,
                 cooldown=0,
                 min_lr=0,
                 **kwargs):
        super(ReduceLROnPlateau, self).__init__()

        self.monitor = monitor
        if factor >= 1.0:
            raise ValueError('ReduceLROnPlateau ' 'does not support a factor >= 1.0.')
        if 'epsilon' in kwargs:
            min_delta = kwargs.pop('epsilon')
            logging.warning('`epsilon` argument is deprecated and '
                            'will be removed, use `min_delta` instead.')
        self.factor = factor
        self.min_lr = min_lr
        self.min_delta = min_delta
        self.patience = patience
        self.verbose = verbose
        self.cooldown = cooldown
        self.cooldown_counter = 0  # Cooldown counter.
        self.wait = 0
        self.best = 0
        self.mode = mode
        self.monitor_op = None
        self._reset()

    def _reset(self):
        """Resets wait counter and cooldown counter.
        """
        if self.mode not in ['auto', 'min', 'max']:
            logging.warning('Learning rate reduction mode %s is unknown, '
                            'fallback to auto mode.', self.mode)
            self.mode = 'auto'
        if (self.mode == 'min' or
                (self.mode == 'auto' and 'acc' not in self.monitor)):
            self.monitor_op = lambda a, b: np.less(a, b - self.min_delta)
            self.best = np.Inf
        else:
            self.monitor_op = lambda a, b: np.greater(a, b + self.min_delta)
            self.best = -np.Inf
        self.cooldown_counter = 0
        self.wait = 0

    def on_train_begin(self, logs=None):
        self._reset()

    def on_epoch_end(self, epoch, logs=None):
        logs = logs or {}
        logs['lr'] = backend.get_value(self.model.optimizer.learning_rate)
        current = logs.get(self.monitor)
        if current is None:
            logging.warning('Learning rate reduction is conditioned on metric `%s` '
                            'which is not available. Available metrics are: %s',
                            self.monitor, ','.join(list(logs.keys())))

        else:
            if self.in_cooldown():
                self.cooldown_counter -= 1
                self.wait = 0

            if self.monitor_op(current, self.best):
                self.best = current
                self.wait = 0
            elif not self.in_cooldown():
                self.wait += 1
                if self.wait >= self.patience:
                    old_lr = backend.get_value(self.model.optimizer.learning_rate)
                    if old_lr > np.float32(self.min_lr):
                        new_lr = old_lr * self.factor
                        new_lr = max(new_lr, self.min_lr)
                        backend.set_value(self.model.optimizer.learning_rate, new_lr)
                        if self.verbose > 0:
                            print('\nEpoch %05d: ReduceLROnPlateau reducing learning '
                                  'rate to %s.' % (epoch + 1, new_lr))
                        self.cooldown_counter = self.cooldown
                        self.wait = 0

    def in_cooldown(self):
        return self.cooldown_counter > 0


class UltimateAdam(tf.keras.optimizers.Optimizer):

    def __init__(
            self,
            learning_rate: FloatTensorLike = 0.001,
            weight_decay: FloatTensorLike = 0.00001,
            sgd_to_adam_factor: FloatTensorLike = 0.9,
            beta_1: FloatTensorLike = 0.9,
            beta_2: FloatTensorLike = 0.999,
            epsilon: FloatTensorLike = 1e-14,
            use_belief=False,
            weight_decay_reduce=False,
            name: str = "UltimateAdam",
            **kwargs,
    ):

        super().__init__(name, **kwargs)
        self._init_lr = learning_rate
        self._set_hyper("learning_rate", learning_rate)
        self._set_hyper("weight_decay", weight_decay)
        self._set_hyper("beta_1", beta_1)
        self._set_hyper("beta_2", beta_2)
        self.epsilon = epsilon or tf.keras.backend.epsilon()
        self._sgd_to_adam_factor = sgd_to_adam_factor
        self._use_belief = use_belief
        self._weight_decay_reduce = weight_decay_reduce
        self._has_weight_decay = weight_decay != 0.0

    def _create_slots(self, var_list):
        for var in var_list:
            self.add_slot(var, "m")
        for var in var_list:
            self.add_slot(var, "v")

    def set_weights(self, weights):
        params = self.weights
        num_vars = int((len(params) - 1) / 2)
        if len(weights) == 3 * num_vars + 1:
            weights = weights[: len(params)]
        super().set_weights(weights)

    def _resource_apply_dense(self, grad, var):
        var_dtype = var.dtype.base_dtype
        lr = self._get_hyper("learning_rate", var_dtype)
        wd = self._get_hyper("weight_decay", var_dtype)
        m = self.get_slot(var, "m")
        v = self.get_slot(var, "v")
        beta_1_t = self._get_hyper("beta_1", var_dtype)
        beta_2_t = self._get_hyper("beta_2", var_dtype)
        epsilon_t = tf.convert_to_tensor(self.epsilon, var_dtype)
        local_step = tf.cast(self.iterations + 1, var_dtype)
        beta_1_power = tf.pow(beta_1_t, local_step)
        beta_2_power = tf.pow(beta_2_t, local_step)

        m_t = m.assign(
            beta_1_t * m + (1.0 - beta_1_t) * grad, use_locking=self._use_locking
        )
        m_corr_t = m_t / (1.0 - beta_1_power)

        if self._use_belief:
            v_t = v.assign(
                beta_2_t * v + (1.0 - beta_2_t) * tf.math.square(grad - m_t) + epsilon_t,
                use_locking=self._use_locking,
            )
        else:
            v_t = v.assign(
                beta_2_t * v + (1.0 - beta_2_t) * tf.math.square(grad) + epsilon_t,
                use_locking=self._use_locking,
            )
        v_corr_t = tf.sqrt(v_t / (1.0 - beta_2_power))

        sgd_ratio = tf.math.pow(self._sgd_to_adam_factor, tf.cast(self.iterations, tf.float32))

        # calculate step
        # sgd step = m_corr_t
        momemtum_component = m_corr_t * sgd_ratio

        # adam step = m_corr_t / (v_corr_t + epsilon_t)
        adaptive_component = (m_corr_t / (tf.math.sqrt(v_corr_t) + epsilon_t)) * (1 - sgd_ratio)

        if self._weight_decay_reduce:

            # combine into final step
            step = (momemtum_component + adaptive_component) * lr

            # modify step by weight decay
            if self._has_weight_decay:
                step += wd * (1 / self._init_lr) * lr * var

            var_update = var.assign_sub(step, use_locking=self._use_locking)
        else:

            # combine into final step
            step = momemtum_component + adaptive_component

            # modify step by weight decay
            if self._has_weight_decay:
                step += wd * var

            var_update = var.assign_sub(step * lr, use_locking=self._use_locking)

        updates = [var_update, m_t, v_t]
        return tf.group(*updates)

    #
    # def get_config(self):
    #     config = super().get_config()
    #     config.update(
    #         {
    #             "learning_rate": self._serialize_hyperparameter("learning_rate"),
    #             "beta_1": self._serialize_hyperparameter("beta_1"),
    #             "beta_2": self._serialize_hyperparameter("beta_2"),
    #             "decay": self._serialize_hyperparameter("decay"),
    #             "weight_decay": self._serialize_hyperparameter("weight_decay"),
    #             "sma_threshold": self._serialize_hyperparameter("sma_threshold"),
    #             "epsilon": self.epsilon,
    #             "amsgrad": self.amsgrad,
    #             "rectify": self.rectify,
    #             "total_steps": self._serialize_hyperparameter("total_steps"),
    #             "warmup_proportion": self._serialize_hyperparameter(
    #                 "warmup_proportion"
    #             ),
    #             "min_lr": self._serialize_hyperparameter("min_lr"),
    #         }
    #     )
    #     return config

